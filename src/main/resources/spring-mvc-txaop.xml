<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
       default-autowire="byName" default-lazy-init="false">

    <import resource="spring-mvc-datasource.xml"></import>


    <!--jdbc/mybatis 应用基于数据源的事务管理器-->
    <bean id="transactionManager_base" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
    <bean name="transactionManager_hibernate"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="hibernateSessionFactory"></property>
    </bean>

    <!--事务增强-->
    <tx:advice id="txAdvice1" transaction-manager="transactionManager_base">
        <!--事务属性-->
        <tx:attributes>
            <tx:method name="get*" read-only="false"/>
            <!--异常回滚-->
            <tx:method name="add*" rollback-for="Exception"/>
            <!--隔离级别-->
            <tx:method name="update*" isolation="DEFAULT" timeout="-1"/>
            <!--传播行为-->
            <tx:method name="save*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--&lt;!&ndash;<aop:config>&ndash;&gt;-->
        <!--&lt;!&ndash;<aop:pointcut id="bussinessService"&ndash;&gt;-->
                      <!--&lt;!&ndash;expression="execution(public * x.y..*.*(..))"/>&ndash;&gt;-->
        <!--&lt;!&ndash;<aop:advisor pointcut-ref="bussinessService"&ndash;&gt;-->
                     <!--&lt;!&ndash;advice-ref="txAdvice1"/>&ndash;&gt;-->
    <!--&lt;!&ndash;</aop:config>&ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash;com.baidu包下所有以Forum结束的类&ndash;&gt;-->
        <!--<aop:pointcut id="bussinessService"-->
                      <!--expression="execution(* my.dao.AccountDaoMybatis*.*(..))"/>-->
        <!--<aop:advisor pointcut-ref="bussinessService"-->
                     <!--advice-ref="txAdvice1"/>-->
    <!--</aop:config>-->





    <!--对标注 Transactional注解的bean 进行加工增强-->
    <tx:annotation-driven transaction-manager="transactionManager_hibernate"/>

    <!--<bean class="my.dao.WriteLog"></bean>-->

    <!--&lt;!&ndash;false JDK动态代理增强 true CGLib动态代理  有接口jdk无则CGLib&ndash;&gt;-->
    <!--&lt;!&ndash;根据注解自动匹配&ndash;&gt;-->
    <!--<aop:aspectj-autoproxy proxy-target-class="false">-->
    <!--</aop:aspectj-autoproxy>-->

    <!--&lt;!&ndash;详细配置&ndash;&gt;-->
    <!--&lt;!&ndash;增强方法所在bean&ndash;&gt;-->
    <!--<bean id="writeLog" class="my.dao.WriteLog"></bean>-->
    <!--<aop:config proxy-target-class="false">-->
        <!--<aop:pointcut id="writeLogCut" expression="target(my.dao.AccountDaoHibernateTxDao) and execution(* saveAccount(..))"></aop:pointcut>-->
        <!--<aop:aspect ref="writeLog">-->
            <!--&lt;!&ndash;切点位置 增强方法 切点表达式&ndash;&gt;-->
            <!--<aop:before method="Before" pointcut-ref="writeLogCut" ></aop:before>-->
            <!--<aop:after-returning method="AfterReturn" returning="retval" pointcut-ref="writeLogCut" ></aop:after-returning>-->

        <!--</aop:aspect>-->

    <!--</aop:config>-->

    <!--&lt;!&ndash;实际也是调用以下&ndash;&gt;-->
    <!--&lt;!&ndash;<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"></bean>&ndash;&gt;-->
    <!--&lt;!&ndash; JSR303 Validator定义 &ndash;&gt;-->
    <!--<bean id="validator"-->
          <!--class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>-->
</beans>