<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">
	<!-- 自动扫描dao和service包(自动注入) -->
	<!-- <context:component-scan base-package="org.jeecgframework.core.common.dao.*" 
		/> <context:component-scan base-package="org.jeecgframework.core.common.service.*" 
		/> -->
	<!-- 加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 -->
	<!-- <context:component-scan base-package="org.jeecgframework.web.*,weixin.*"> -->
	<!-- cdp -->
	<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" 
		/> </context:component-scan> -->

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />
	<!-- cdp 难道这里下面的bean能直接取到上面引入文件的值 ${jdbc.username.jeecg} 占位符 -->
	<!-- 配置数据源1 -->
	<bean name="dataSource_jeecg" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url.jeecg}" />
		<property name="username" value="${jdbc.username.jeecg}" />
		<property name="password" value="${jdbc.password.jeecg}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="5" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="${validationQuery.sqlserver}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 开启Druid的监控统计功能 -->
		<property name="filters" value="stat" />
		<!--<property name="filters" value="mergeStat" /> -->
		<!-- Oracle连接是获取字段注释 -->
		<property name="connectProperties">
			<props>
				<prop key="remarksReporting">true</prop>
			</props>
		</property>
	</bean>


	<!-- 数据源集合 -->
	<!-- <bean id="dataSource" class="org.jeecgframework.core.extend.datasource.DynamicDataSource"> 
		cdp 看了这个类 并没有 targetDataSources属性 不懂 <property name="targetDataSources"> 
		<map key-type="org.jeecgframework.core.extend.datasource.DataSourceType"> 
		<entry key="dataSource_jeecg" value-ref="dataSource_jeecg" /> <entry key="mapdataSource" 
		value-ref="mapdataSource" /> </map> </property> <property name="defaultTargetDataSource" 
		ref="dataSource_jeecg" /> </bean> -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<!-- <property name="driverClassName" value="com.microsoft.jdbc.sqlserver.SQLServerDriver"> 
			</property> -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver">
		</property>
		<!-- <property name="url" value="jdbc:microsoft:sqlserver://192.168.0.71:1433;DatabaseName=cdptooldb"> 
			</property> -->
		<property name="url"
			value="jdbc:mysql://localhost:3306/cdptooldb?useUnicode=true">
		</property>
		<property name="username" value="root"></property>
		<property name="password" value="1CUI"></property>
		<property name="maxActive" value="200"></property>
		<property name="maxIdle" value="50"></property>
		<property name="maxWait" value="60000"></property>
		<property name="removeAbandoned" value="true"></property>
		<property name="removeAbandonedTimeout" value="30"></property>
	</bean>



	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="entityInterceptor" ref="hiberAspect" /> -->
		<property name="hibernateProperties">
			<props>
				<!--<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">false</prop>
			</props>
		</property>
		<!-- 注解方式配置 -->
		<!-- <property name="packagesToScan"> <list> <value>org.jeecgframework.web.system.pojo.*</value> 
			<value>org.jeecgframework.web.demo.entity.*</value> <value>org.jeecgframework.web.test.entity.*</value> 
			<value>org.jeecgframework.web.cgform.entity.*</value> <value>org.jeecgframework.web.cgreport.entity.*</value> 
			<value>weixin.*</value> </list> </property> -->
	</bean>


	<!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<!-- JDBC配置 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>

	<!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 -->
	<bean name="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />
	<!-- 创建SqlSessionFactory，同时指定数据源 -->
	<!-- 集成mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- SqlSessionTemplate 有一个使用 ExecutorType 作为参数的构造方法。这允许你用来 创建对象,比如,一个批量 
		SqlSession,但是使用了下列 Spring 配置的 XML 文件: -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- <constructor-arg index="1" value="BATCH" /> -->
	</bean>

	<!-- <bean id="userDao" class="cdptool.dao.UserDaoImpl"> <property name="sqlSession" 
		ref="sqlSession" /> </bean> -->

	<!-- 映射器 只有注册了映射，才可以通过 sqlsession 像 return (account) sqlSession.selectOne("cdptool.dao.AccountMapper.getUser", 
		userId);查询 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="cdptool.dao.AccountMapper" /> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->
	<!-- 没有必要在 Spring 的 XML 配置文件中注册所有的映射器。相反,你可以使用一个 MapperScannerConfigurer 
		, 它 将 会 查 找 类 路 径 下 的 映 射 器 并 自 动 将 它 们 创 建 成 MapperFactoryBean。 -->
	<!-- 注 意 , 没 有 必 要 去 指 定 SqlSessionFactory 或 SqlSessionTemplate , 因 为 MapperScannerConfigurer 
		将会创建 MapperFactoryBean,之后自动装配。但是,如果你使 用了一个 以上的 DataSource ,那 么自动 装配可 能会失效 
		。这种 情况下 ,你可 以使用 sqlSessionFactoryBeanName 或 sqlSessionTemplateBeanName 属性来设置正确的 
		bean 名 称来使用。这就是它如何来配置的,注意 bean 的名称是必须的,而不是 bean 的引用,因 此,value 属性在这里替代通常的 
		ref: -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cdptool.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


</beans>